package com.huawei;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class System {
	private static Map<Integer, Car> cars;// 保存所有的车辆 TODO 看下是否需要比较器
	private static Map<Integer, Road> roads;// 保存所有的路
	private static Map<Integer, Cross> crosses;// 保存所有的路口
	private static List<Car> workedCars = new ArrayList<Car>();// check之后的车辆
	private static List<Car> finshedCars = new ArrayList<Car>();// 到达终点车辆
	private static List<Car> newCar = new ArrayList<Car>();// 未上路的车
	private static List<Car> onLoadCar = new ArrayList<Car>();// 在路上的车
	private static int time = 1;

	public static void launch() {
		newCar.addAll(cars.values());

		while (!finshedCars.containsAll(cars.values())) {// 所有车辆均到达终点则跳出循环
			while (!(workedCars.containsAll(onLoadCar) && isAllEnd(workedCars))) {// 所有路上的车都check后并且进入终止状态后进入下一个时间片

				for (Cross cross : crosses.values()) {// 遍历路口
					int index[] = cross.getRoadID(); // 遍历路口连接的路
					
					
					Road road = roads.get(index);
					if (road.isDuplex()) {
						if (road.getTo().equals(cross)) {
							for (int i = 1; i <= road.getChannels().size() / 2; i++) {
								for (Car car : road.getChannels().get(i)) {
									car.checkCar();
								}
							}
						} else {
							for (int i = -1; i >= -road.getChannels().size() / 2; i--) {
								for (Car car : road.getChannels().get(i)) {
									car.checkCar();
									car.run();
								}
							}
						}
					} else {
						if (road.getTo().equals(cross)) {
							for (int i = 1; i <= road.getChannels().size(); i++) {
								for (Car car : road.getChannels().get(i)) {
									car.checkCar();
								}
							}
						}
					}

				}
				// 运行车辆
				
				for (Car car : newCar) {// 到达出发时间后发车
					if (car.getTime() == time) {
						addPath(car);
						car.start();
						onLoadCar.add(car);
						newCar.remove(car);
					}
				}

			}
			workedCars.clear();
			time++;
		}
	}

	private static boolean isAllEnd(List<Car> cars) {
		for (Car car : cars) {
			if (!car.isEnd()) {
				return false;
			}
		}
		return true;
	}

	public static void addPath(Car car) {// 上路之前给车添加路径
		Cross start = car.getStart();
		Cross destination = car.getDestination();
		car.setPath(path(start, destination));
	}

	private static LinkedList<Road> path(Cross from, Cross to) {// TODO 路径算法
		LinkedList<Road> path = new LinkedList<Road>();

		return path;
	}

	public static void initGraph() {

	}

	public static void read(String carPath, String roadPath, String crossPath) {
		crosses = Util.readCrossInfo(crossPath);
		cars = Util.readCarInfo(carPath);
		roads = Util.readRoadInfo(roadPath);
	}

	public static void write(String answerPath) {
		Util.writeAnswerInfo(cars.values(), answerPath);
	}

	public static void addWorkedCar(Car car) {
		if (!workedCars.contains(car)) {
			workedCars.add(car);
		}
	}

	public static boolean isWorked(Car car) {
		if (workedCars.contains(car)) {
			return true;
		}
		return false;
	}

	public static int getTime() {
		return time;
	}

	public static void finished(Car car) {
		finshedCars.add(car);
		onLoadCar.remove(car);
	}

	public static Cross getCross(int id) {
		if (crosses.containsKey(id)) {
			return crosses.get(id);
		}
		return null;
	}

	
	
	
	
	
	public static Map<Integer, Car> getCars() {
		return cars;
	}

	public static Map<Integer, Road> getRoads() {
		return roads;
	}

	public static Map<Integer, Cross> getCrosses() {
		return crosses;
	}

	
}
